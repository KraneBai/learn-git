{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","console","log","target","_event$target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","App","characters","filter","character","i","concat","toConsumableArray","_this2","fetch","then","result","json","data","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07961759.chunk.js","sourcesContent":["import React, { Component } from 'react';\nconst TableHeader = () => {\n    return (\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Job</th>\n          <th>Remove</th>\n        </tr>\n      </thead>\n    )\n  }\n  const TableBody = props => {\n      const rows = props.characterData.map((row, index) => {\n          return (\n              <tr key={index}>\n                <td>{row.name}</td>\n                <td>{row.job}</td>\n                <td>\n                    <button onClick={() => {props.removeCharacter(index)}}>Delete</button>\n                </td>\n              </tr>\n          )\n      })\n      return <tbody>{rows}</tbody>\n  }\nclass Table extends Component {\n    render() {\n        const { characterData, removeCharacter } = this.props\n      return (\n        <table>\n            <TableHeader />\n            <TableBody characterData={characterData} removeCharacter={removeCharacter} />\n        </table>\n    )\n  }\n}\nexport default Table","import React, { Component } from 'react'\n\nclass Form extends Component {\n    constructor (props) {\n        super(props)\n\n        this.initialState = {\n            name: '',\n            job: ''\n        }\n\n        this.state = this.initialState\n    }\n    handleChange = event => {\n        console.log(event.target.name)\n        const { name, value } = event.target\n        \n        this.setState({\n            [name]: value,\n        })\n    }\n    submitForm = () => {\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n    render() {\n        const { name, job } = this.state;\n        return (\n          <form>\n            <label>Name</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange} />\n            <label>Job</label>\n            <input\n              type=\"text\"\n              name=\"job\"\n              value={job}\n              onChange={this.handleChange} />\n            <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n          </form>\n        );\n      }\n}\nexport default Form;","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nclass App extends Component {\n  state = {\n    characters: []\n  }\n  removeCharacter = index => {\n    const { characters } = this.state\n  \n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      })\n    })\n  }\n  componentDidMount() {\n    const url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\n\n    fetch(url)\n      .then(result => result.json())\n      .then(result => {\n        this.setState({\n          data: result,\n        })\n      })\n  }\n\n\n  handleSubmit = character => {\n    this.setState({ characters: [...this.state.characters, character] })\n  }\n  render () {\n    const { characters } = this.state\n    return (\n      <div className=\"container\">\n        <h1>hello react</h1>\n        <Table characterData={characters} removeCharacter={this.removeCharacter}/>\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    )\n  }\n}\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}